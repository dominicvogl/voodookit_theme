/*
* Basic Mixins
* @file:    mixins.less
* @author:  BERGWERK, [dv]
*/

.gradient (@startColor: #eee, @endColor: white) {
   background-color: @startColor;
   background: -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
   background: -webkit-linear-gradient(top, @startColor, @endColor);
   background: -moz-linear-gradient(top, @startColor, @endColor);
   background: -ms-linear-gradient(top, @startColor, @endColor);
   background: -o-linear-gradient(top, @startColor, @endColor);
}

.horizontal-gradient (@startColor: #eee, @endColor: white) {
   background-color: @startColor;
   background-image: -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));
   background-image: -webkit-linear-gradient(left, @startColor, @endColor);
   background-image: -moz-linear-gradient(left, @startColor, @endColor);
   background-image: -ms-linear-gradient(left, @startColor, @endColor);
   background-image: -o-linear-gradient(left, @startColor, @endColor);
}

.text-shadow (@string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
   text-shadow: @string;
}

.box-shadow (@string) {
   -webkit-box-shadow: @string;
   -moz-box-shadow: @string;
   box-shadow: @string;
}

.drop-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
   -webkit-box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
   -moz-box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
   box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
}

.inner-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
   -webkit-box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
   -moz-box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
   box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
}

.box-sizing (@type: border-box) {
   -webkit-box-sizing: @type;
   -moz-box-sizing: @type;
   box-sizing: @type;
}

.border-radius (@radius: 5px) {
   -webkit-border-radius: @radius;
   -moz-border-radius: @radius;
   border-radius: @radius;

   -moz-background-clip: padding;
   -webkit-background-clip: padding-box;
   background-clip: padding-box;
}

.border-radiuses (@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0) {
   -webkit-border-top-right-radius: @topright;
   -webkit-border-bottom-right-radius: @bottomright;
   -webkit-border-bottom-left-radius: @bottomleft;
   -webkit-border-top-left-radius: @topleft;

   -moz-border-radius-topright: @topright;
   -moz-border-radius-bottomright: @bottomright;
   -moz-border-radius-bottomleft: @bottomleft;
   -moz-border-radius-topleft: @topleft;

   border-top-right-radius: @topright;
   border-bottom-right-radius: @bottomright;
   border-bottom-left-radius: @bottomleft;
   border-top-left-radius: @topleft;

   -moz-background-clip: padding;
   -webkit-background-clip: padding-box;
   background-clip: padding-box;
}

.clear-appearance() {
   border: none;
   border-radius: 0;
   outline: none;
   appearance: none;
   -webkit-appearance: none;
   -moz-appearance: none;
   -o-appearance: none;
   text-indent: 0.01px; // Need this to hide default select in FF
   text-overflow: ''; // Need this to hide default select in FF
   &::-ms-expand {
      display: none; // Need this to hide default select in IE10
   }
}

.opacity (@opacity: 0.5) {
   -webkit-opacity: @opacity;
   -moz-opacity: @opacity;
   opacity: @opacity;
}

.gradient (@startColor: #eee, @endColor: white) {
   background-color: @startColor;
   background: -webkit-gradient(linear, left top, left bottom, from(@startColor), to(@endColor));
   background: -webkit-linear-gradient(top, @startColor, @endColor);
   background: -moz-linear-gradient(top, @startColor, @endColor);
   background: -ms-linear-gradient(top, @startColor, @endColor);
   background: -o-linear-gradient(top, @startColor, @endColor);
}

.horizontal-gradient (@startColor: #eee, @endColor: white) {
   background-color: @startColor;
   background-image: -webkit-gradient(linear, left top, right top, from(@startColor), to(@endColor));
   background-image: -webkit-linear-gradient(left, @startColor, @endColor);
   background-image: -moz-linear-gradient(left, @startColor, @endColor);
   background-image: -ms-linear-gradient(left, @startColor, @endColor);
   background-image: -o-linear-gradient(left, @startColor, @endColor);
}

.inline-block() {
   display: -moz-inline-stack;
   display: inline-block;
   vertical-align: top;
   zoom: 1;
   *display: inline;
}

.animation (@name, @duration: 300ms, @delay: 0, @ease: ease) {
   -webkit-animation: @name @duration @delay @ease;
   -moz-animation: @name @duration @delay @ease;
   -ms-animation: @name @duration @delay @ease;
}

.transition (@transition: all .15s) {
   -webkit-transition: @transition;
   -moz-transition: @transition;
   -ms-transition: @transition;
   -o-transition: @transition;
   transition: @transition;
}

.transition-extended (@props: all;
             @duration:1s;
             @delay: 0s;
             @timing: ease;
             @raw-input: false) {
   .output() when (@raw-input = false) {
      @propsLength: length(@props);
      @durationLength: length(@duration);
      @delayLength: length(@delay);
      @timingLength: length(@timing);
      .buildString(@i, @s: ~'') when (@i <= @propsLength) {
         @prop: extract(@props, @i);
         .setDuration() when (@i <= @durationLength) {
            @dur: extract(@duration, @i);
         }
         .setDuration() when (@i > @durationLength) {
            @dur: extract(@duration, @durationLength);
         }
         .setDuration();
         .setDelay() when (@i <= @delayLength) {
            @del: extract(@delay, @i);
         }
         .setDelay() when (@i > @delayLength) {
            @del: extract(@delay, @delayLength);
         }
         .setDelay();
         .setTiming() when (@i <= @timingLength) {
            @time: extract(@timing, @i);
         }
         .setTiming() when (@i > @timingLength) {
            @time: extract(@timing, @timingLength);
         }
         .setTiming();
         .setDivider() when (@i > 1) {
            @divider: ~'@{s},';
         }
         .setDivider() when (@i = 1) {
            @divider: ~'';
         }
         .setDivider();
         @string: @divider @prop @dur @del @time;
         .buildString((@i + 1), @string);
      }
      .buildString(1);
      .buildString(@i, @s: ~'') when (@i > @propsLength) {
         .compact(@s);
      }
   }
   .output() when not (@raw-input = false) {
      .compact(@raw-input);
   }
   .compact(@string) {
      -webkit-transition: @string;
      -moz-transition: @string;
      -ms-transition: @string;
      -o-transition: @string;
      transition: @string;
   }
   .output();
}

.transform(@string) {
   -webkit-transform: @string;
   -moz-transform: @string;
   -ms-transform: @string;
   -o-transform: @string;
   transform: @string;
}

.scale (@factor) {
   -webkit-transform: scale(@factor);
   -moz-transform: scale(@factor);
   -ms-transform: scale(@factor);
   -o-transform: scale(@factor);
}

.rotate (@deg) {
   -webkit-transform: rotate(@deg);
   -moz-transform: rotate(@deg);
   -ms-transform: rotate(@deg);
   -o-transform: rotate(@deg);
}

.skew (@deg, @deg2) {
   -webkit-transform: skew(@deg, @deg2);
   -moz-transform: skew(@deg, @deg2);
   -ms-transform: skew(@deg, @deg2);
   -o-transform: skew(@deg, @deg2);
}

.translate (@x, @y:0) {
   -webkit-transform: translate(@x, @y);
   -moz-transform: translate(@x, @y);
   -ms-transform: translate(@x, @y);
   -o-transform: translate(@x, @y);
}

.translate3d (@x, @y: 0, @z: 0) {
   -webkit-transform: translate3d(@x, @y, @z);
   -moz-transform: translate3d(@x, @y, @z);
   -ms-transform: translate3d(@x, @y, @z);
   -o-transform: translate3d(@x, @y, @z);
}

.perspective (@value: 1000) {
   -webkit-perspective: @value;
   -moz-perspective: @value;
   -ms-perspective: @value;
   perspective: @value;
}

.transform-origin (@x:center, @y:center) {
   -webkit-transform-origin: @x @y;
   -moz-transform-origin: @x @y;
   -ms-transform-origin: @x @y;
   -o-transform-origin: @x @y;
}

.filter (@values) {
   -webkit-filter: @values;
   filter: @values;
}

.vh() {
   border: 0;
   clip: rect(0 0 0 0);
   height: 1px;
   margin: -1px;
   overflow: hidden;
   padding: 0;
   position: absolute;
   width: 1px;
}

.backface-visibility() {
   -webkit-backface-visibility: hidden;
   backface-visibility: hidden;
}

.x-center() {
   position: absolute;
   left: 50%;
   -webkit-transform: translateX(-50%);
   -ms-transform: translateX(-50%);
   transform: translateX(-50%);
}

.y-center() {
   position: relative;
   top: 50%;
   -webkit-transform: translateY(-50%);
   -ms-transform: translateY(-50%);
   transform: translateY(-50%);
}

.xy-center() {
   position: absolute;
   top: 50%;
   left: 50%;
   -webkit-transform: translate(-50%, -50%);
   -ms-transform: translate(-50%, -50%);
   transform: translate(-50%, -50%);
}

.xy-center {
   .xy-center();
}

.x-center {
   .x-center();
}

.y-center {
   .y-center();
}

.icon_before() {
   &:before {
      font-family: "icons";
      display: inline-block;
      vertical-align: middle;
      line-height: 1;
      font-weight: normal;
      font-style: normal;
      speak: none;
      text-decoration: inherit;
      text-transform: none;
      text-rendering: optimizeLegibility;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
   }
}